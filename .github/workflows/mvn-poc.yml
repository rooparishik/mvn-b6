# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml
     
    - name: Install Kubectl
      run: |
         curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
         curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
         echo "$(<kubectl.sha256)  kubectl" | sha256sum --check
         sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
         chmod +x kubectl
         mkdir -p ~/.local/bin/kubectl
         mv ./kubectl ~/.local/bin/kubectl
         #kubectl version --client      
    - name: Install Kustomize 
      run: |
         curl -s https://api.github.com/repos/kubernetes-sigs/kustomize/releases
         grep browser_download 
         grep $opsys 
         grep kustomize_kustomize 
         head -n1 
         cut -d '"' -f 4 
         xargs curl -O -L
         mv kustomize_kustomize.v*_${opsys}_amd64 kustomize
         chmod u+x kustomize
    - name: Helm Installation
      env:  
         HELM_V2: 2.16.7
      run:  echo "downloading helm ${HELM_V2}" && curl -sSL https://get.helm.sh/helm-v${HELM_V2}-linux-amd64.tar.gz | \ tar xz && mv linux-amd64/helm /usr/local/bin/helm && rm -rf linux-amd64 && helm version --client
 
    - name: Helm V3 Installation
      env:  
         HELM_V3: 3.2.1
      run:  echo "downloading helm ${HELM_V3}" && curl -sSL https://get.helm.sh/helm-v${HELM_V3}-linux-amd64.tar.gz | \ tar xz && mv linux-amd64/helm /usr/local/bin/helmv3 && rm -rf linux-amd64 && helmv3 version
 
    - name: KubeVal Installation
      env:  
         KUBEVAL: 0.15.0
      run:  echo "downloading kubeval ${KUBEVAL}" && curl -sL https://github.com/instrumenta/kubeval/releases/download/${KUBEVAL}/kubeval-linux-amd64.tar.gz | \ tar xz && mv kubeval /usr/local/bin/kubeval && kubeval --version

    - name: Kubeaudit Installation 
      env:  
          KUBEAUDIT: 0.11.5
      run:  echo "downloading kubeaudit ${KUBEAUDIT}" && curl -sSL https://github.com/Shopify/kubeaudit/releases/download/v${KUBEAUDIT}/kubeaudit_${KUBEAUDIT}_linux_amd64.tar.gz | \ tar xz && mv kubeaudit /usr/local/bin/kubeaudit && kubeaudit --help

    - name: Conftest Installation
      env:  
         CONFTEST: 0.19.0
      run:  echo "downloading conftest ${CONFTEST}" && curl -sL https://github.com/open-policy-agent/conftest/releases/download/v${CONFTEST}/conftest_${CONFTEST}_Linux_x86_64.tar.gz | \ tar xz && mv conftest /usr/local/bin/conftest && conftest --version

    - name: Kubeseal Installation
      env:  
         KUBESEAL: 0.12.5
      run:  echo "downloading kubeseal ${KUBESEAL}" && curl -sL https://github.com/bitnami-labs/sealed-secrets/releases/download/v${KUBESEAL}/kubeseal-linux-amd64 \ -o /usr/local/bin/kubeseal && chmod +x /usr/local/bin/kubeseal && kubeseal --version

    - name: yq Installation
      run:  echo "downloading yq" && curl -sL https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 \ -o /usr/local/bin/yq && chmod +x /usr/local/bin/yq && yq --version
    - name: jq Installation
      run:  echo "downloading jq" && curl -sL https://github.com/stedolan/jq/releases/latest/download/jq-linux64 \ -o /usr/local/bin/jq && chmod +x /usr/local/bin/jq && jq --version
    - name: Tanzu Install
      run: |
         curl -H "Accept: application/vnd.github.v3.raw" \-L https://api.github.com/repos/vmware-tanzu/community-edition/contents/hack/get-tce-release.sh | \bash -s v0.9.1 linux
         tar xzvf tce-linux-amd64-v0.9.1.tar.gz
         cd tce-linux-amd64-v0.9.1
         ./install.sh
         tanzu version
         tanzu plugin list
         
    - name: Set env variable and proxy
      env:
       TKG_CUSTOM_IMAGE_REPOSITORY_SKIP_TLS_VERIFY: true
       https_proxy: http://http-proxy.ntrs.com:443/
      run: echo $TKG_CUSTOM_IMAGE_REPOSITORY_SKIP_TLS_VERIFY $https_proxy
 #   Proxy: http://htttp-proxy.ntrs.com:443/
        
    - name: Login to Tanzu Cluster
      run: |
        tanzu login --endpoint https://mgmt-az1-1.system-1.tkgm.ntrs.com:6443 --name mgmt-az1-1-system-1 
   
    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
    - name: SonarQube Quality Gate check
      uses: sonarsource/sonarqube-quality-gate-action@master
      # Force to fail step after specific time
      timeout-minutes: 5
      env:
       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    - name: execute py script
      run:  |
        python poc_sonar_api.py
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    - name: Publish package
      run: mvn --batch-mode deploy
      env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GIT }}
    - name: Tomcat deploy
      run: curl -v -u ${{ secrets.TOM_USERNAME }}:${{ secrets.TOM_PASSWD }} -T /home/runner/work/mvn-poc/mvn-poc/target/flipkart.war 'http://54.244.214.106:8080/manager/text/deploy?path=/GithubActions'
