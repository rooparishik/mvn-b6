# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml
      
    #- uses: actions/checkout@v2
    - name: Run Kubernetes tools
      uses: grebois/kube-tools@v1.5.2
      with:
          kubectl: 1.18.2
          kustomize: 3.5.5
          helm: 2.16.7
          helmv3: 3.2.1
          kubeseal: 0.12.5
          kubeaudit: 0.11.5
          command: |
             echo $kubectl --version
          #  echo "Run conftest"
          #  kustomize build test/kustomize | conftest test -p test/policy -
          #  echo "Run kubeval"
          #  helmv3 template ./charts/test | kubeval --strict
     
    - name: Tanzu Install
      run: |
         curl -H "Accept: application/vnd.github.v3.raw" \-L https://api.github.com/repos/vmware-tanzu/community-edition/contents/hack/get-tce-release.sh | \bash -s v0.9.1 linux
         tar xzvf tce-linux-amd64-v0.9.1.tar.gz
         cd tce-linux-amd64-v0.9.1
         ./install.sh
         tanzu version
         tanzu plugin list
         
    - name: Set env variable and proxy
      env:
       TKG_CUSTOM_IMAGE_REPOSITORY_SKIP_TLS_VERIFY: true
       https_proxy: http://http-proxy.ntrs.com:443/
      run: echo $TKG_CUSTOM_IMAGE_REPOSITORY_SKIP_TLS_VERIFY $https_proxy
 #   Proxy: http://htttp-proxy.ntrs.com:443/
        
    - name: Login to Tanzu Cluster
      run: |
        tanzu login --endpoint https://mgmt-az1-1.system-1.tkgm.ntrs.com:6443 --name mgmt-az1-1-system-1 
   
    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
    - name: SonarQube Quality Gate check
      uses: sonarsource/sonarqube-quality-gate-action@master
      # Force to fail step after specific time
      timeout-minutes: 5
      env:
       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    - name: execute py script
      run:  |
        python poc_sonar_api.py
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    - name: Publish package
      run: mvn --batch-mode deploy
      env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GIT }}
    - name: Tomcat deploy
      run: curl -v -u ${{ secrets.TOM_USERNAME }}:${{ secrets.TOM_PASSWD }} -T /home/runner/work/mvn-poc/mvn-poc/target/flipkart.war 'http://54.244.214.106:8080/manager/text/deploy?path=/GithubActions'
